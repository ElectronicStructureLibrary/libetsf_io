* Wed May 27 2009 Damien Caliste <damien.caliste@cea.fr> 1.0.3
- Correct configure.ac and Makefile.am for aclocal to always run with its
  config/m4 inclusion.
- Modify the dielectric function specification to fullfil specs 3.3.
- Comment out the phonon part since not yet included officially in the spec.

* Thu Nov 07 2008 Damien Caliste <damien.caliste@cea.fr> 1.0.3-dev2
- Add the proposal specification for the phonons.
- Modify the code generation to correctly handle the case with twice the
  same dimension in the shape declaration of an array. In that case _%d is
  appended to the name of the attricute in the group structure.
- Correct a bug to actually use the restriction on the number of elements
  for the variables that have a max_something dimension but that has
  no split flag.

* Thu Nov 06 2008 Damien Caliste <damien.caliste@cea.fr> 1.0.3-dev1
- Add the proposal specification for the dielectric function.

* Thu Sep 11 2008 Damien Caliste <damien.caliste@cea.fr> 1.0.2
- Update the fortran.m4 macro to recognise the open64 compiler.
- Update the configure.ac to handle the open64 compiler.

* Fri Apr 04 2008 Damien Caliste <damien.caliste@cea.fr> 1.0.1
- Add a --with-moduledir option to the configure to be able to choose the
	installation path for modules.
- Update the fortran.m4 macro to recognise newest version of gfortran (>4.1).

* Tue Aug 21 2007 Damien Caliste <damien.caliste@cea.fr> 1.0.0
- Official publication of version 1.0.0.

* Thu Aug 09 2007 Damien Caliste <damien.caliste@cea.fr> 1.0-rc2
- correct a bug in etsf_io when checking the wavefunctions in plane_waves
	mode with k_dependent = "no".
- add a simple routine in etsf_io_low_level to read the flag attribute as
	defined in the specifications. Also add tests for this routine.
- add the support of split definition in the check routines.
- bugs corrections in tests/low_level, src/low_level/read_routines.f90,
	the documentation...

* Fri Jul 06 2007 Damien Caliste <damien.caliste@cea.fr> 1.0-rc1
- add tests for the copy action of the ETSF groups.
- add a tutorial on the reading part, very simple with the basics of the
	etsf_io_<group>_get routines and the possible split definitions.
- add gestion of the use_time_reversal_at_gamma attribute as introduced by
	the 2.2 specifications.
- add a full backtrace for the routines in the library to ease the
	tracking of errors when called from an other program.
- add a way to precisely choose the variables when defining a file. This
	has bringed some minor in the ETSF group API, for etsf_io_main_*
	and for etsf_io_data_*.
- add the wavelet basis set as discussed in the IT9 meeting in San
	Sebastian in May 2007 (still in a draft for inclusion in
	specifications when 0.10 has been shipped).
	
* Fri May 11 2007 Damien Caliste <damien.caliste@cea.fr> 0.9
- complete all TODO occurances in the HTML pages.
- update all licence citation and remove all ABINIT occurance. Also add 2007 to the
  copyright and the name of the author for each part of the code.
- implement a copy_all_attribute routine in the low_level module. This routine
  is then used by the group level copy routines and the utils level merge routine
  to keep tracks of attributes in file merging. Several tests have been added
  in the low level pool to ensure this new copy routine.
- add a tutorial on the creation of non-ETSF variables, concurrently with ETSF
  ones.
- change the name of the wavedata group to basisdata for a better consistency.
	
* Fri Mar 09 2007 Damien Caliste <damien.caliste@cea.fr> 0.8
- add two more tutorials, one on the split usage and one on the high level routines.
- improve the documentation, especially the non robodoc pages.
- create a high level routine to check the validity of a file on the big domains
  the specifications deal with.
- create a high level routine to get the names of chemical species following the
  recommendations in the specifications.
- add two more actions to the etsf_io tool: the content and the check actions.
- fix some bugs in the build system and in the low level part.
	
* Wed Jan 17 2007 Damien Caliste <damien.caliste@cea.fr> 0.7
- add a new Fortran type to store the split definitions (e.g. my_kpoints...). This
  structure can be used when defining the variables on initialisation to set the
  splitted dimensions to the variables that need them.
- add a new source directory src/utils that will contains some high level library
  not mandatory but with convienient tools. It currently contains a routine to merge
  files that have been created with some split definition. To do it several group
  level have been added, especially some to copy variables from one file to another.
  The split action is complete for all ETSF variables, but other ones are currently
  lost, but also attributes and headers are lost.
- add a new tutorial on sub access. It explain how to use the
  <varname>__[spin|kpoint]_access attributes of groups that have been introduced in
  the last release.
	
* Tue Dec 12 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.6
- rewrite the generating script for low access in Python for a better portability.
- complete the implementation of all attributes (units, k_dependent and symmorphic).
  The unit attributes change the reading behavior, getting the values into atomic
  units, except if the optional argument use_atomic_units is set to false. The
  k_dependent attribute change the size of the array reduced_coordinates_of_plane_waves
  when set on creation. The symmorphic attribute is changed whenever the 
  reduced_symmetry_translations are written.
- modify the support for sub access in an array, using new elements in each groups
  instead of a special type for selected variables. These new element are based on
  a short name for the variable, followed by two underscore and spin_access or kpoint_access,
  storing an integer corresponding to the spin or the k point to be read or written.
  Whenever a variable has a dimension with max_number_of_something, such an element
  is also created in the group to be able to read or write only a part in that dimension.
- add a documentation for the argument of group level routines.
- create an index.html page in the doc/www section.
- create a tutorial section in the sources, being cases heavily documented. Only one example
  is currently given.

* Wed Nov 29 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.5
- Completely change the low level sub-part access, using now the start, count and map
  argument as in NetCDF (with small modifications). This has been required to be able
  to have sub access on every dimensions, not only the last and to have access to
  part of one dimension (not only one element or the all set of elements of one
  dimension). With the map attribute, it will be possible to swap dimensions
  on the fly when reading or writing.
- change the status of the main group in the group level access. The main group is now part
  of the etsf_groups folder as others. When defining, it is still possible to choose one
  or several variables of this main group.
- add partial support for the units attribute (writing is done with default values and 
  reading only load the values but do nothing with them) and the k_dependant attribute
  for number_of_coefficients and number_of_states.
- correct a bug in the implementation while still using the old number_of_symmetries
  dimension.

* Fri Nov 17 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.4
- create a type for variables that can have a partial access. Update the code
  routine to cope with this new type.
- upgrade the documentation by using sections and subsections.
- correct a bug when using sub access on low level.

* Mon Nov 13 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.3
- import the group level scripts of Yann Pouillon to build a high level API
  on the ETSF specifications.
- modify then to use the unformatted shape for the main data in the ETSF specs.
- make the group level routines use the low level ones (guaranteeing dimension
  checks).
- add default values in the etsf_io structure and add the consistency checks in calls.

* Mon Nov 06 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.2
- modify the low level API to allow to use different (but compatible) shapes
  for variables.
- add the capability to address only part of variables.
- create a generic type of pointers to be able to use the library without
  dupplicating data in memory and access same data with the same high level
  routine but with an unformatted shape array.

* Thu Nov 02 2006 Damien Caliste <caliste@pcpm.ucl.ac.be> 0.1
- basic read/write low level API in Fortran90.
- put library under the LGPL, waiting for global discussion on the future licence.
- initial API documentation using ROBODoc.
