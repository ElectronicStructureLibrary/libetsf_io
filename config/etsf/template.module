!{\src2tex{textfont=tt}}
!!****h* group_level/etsf_io
!! NAME
!!  etsf_io
!!
!! FUNCTION
!!  This module contains all information required by the ETSF/Nanoquanta
!!  file format specifications. See http://www.etsf.eu/fileformats for
!!  details.
!!
!!  It contains definitions of:
!!  * #ETSF_IO_CONSTANTS some constants defined by the specifications ;
!!  * #FLAGS_GROUPS & #FLAGS_MAIN, public flags to identify specific
!!    structures ;
!!  * the list of all dimensions declared in the specifications, see
!!    #etsf_dimensions.
!!  * several structures to store variable used in a same context, such as
!!    geometry informations, k points data...
!!  * a container (see #etsf_groups) to agregate all previous structures.
!!  * a container to store the main data (see #etsf_main).
!!
!! COPYRIGHT
!!  Copyright (C) 2006
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~abinit/COPYING
!!  or http://www.gnu.org/copyleft/lesser.txt .
!!
!! NOTES
!!  This file has been automatically generated by the @SCRIPT@
!!  script. Any change you would bring to it will systematically be
!!  overwritten.
!!***
module etsf_io

  use etsf_io_low_level

  implicit none

  !!****d* etsf_io_basics_group/ETSF_IO_CONSTANTS
  !! NAME
  !!  ETSF_IO_CONSTANTS
  !!
  !! FUNCTION
  !!  These values are fixed by the specifications.
  !!
  !! SOURCE
  ! Constants for internal dimensions
  integer,parameter :: etsf_charlen = 80
  integer,parameter :: etsf_histlen = 1024
  integer,parameter :: etsf_chemlen = 2
  integer,parameter :: etsf_3dimlen = 3

@CONSTANTS@
  !!***

  !!****d* etsf_io_basics_group/FLAGS_GROUPS
  !! NAME
  !!  FLAGS_GROUPS
  !!
  !! FUNCTION
  !!  These flags are used when indicating which groups must be used.
  !!  If several groups must be accessed, then, simply add the corresponding
  !!  flags. See etsf_io_data_write() or etsf_io_data_read() for usage.
  !!
  !! SOURCE
@FLAGS_GROUPS@
  !!***

  !!****d* etsf_io_basics_group/FLAGS_MAIN
  !! NAME
  !!  FLAGS_MAIN
  !!
  !! FUNCTION
  !!  These flags are used when indicating which main data must be handled.
  !!  Contrary to #FLAGS_GROUPS, these flags are mutualy exclusive and only one
  !!  can be given at a time. See etsf_io_data_write() or etsf_io_data_read() for usage.
  !!
  !! SOURCE
@FLAGS_MAIN@
  !!***

  !!****s* etsf_io_basics_group/etsf_dims
  !! NAME
  !!  etsf_dimensions
  !!
  !! FUNCTION
  !!  This structure is a container that stores all dimensions defined in the
  !!  specifications. An instance of this structure is required when a new
  !!  ETSF file is created.
  !!
  !! SOURCE
@DIMENSIONS@
  !!***

  !!****s* etsf_io_basics_group/etsf_io_splitted_var_integer
  !! NAME
  !!  etsf_io_splitted_var_integer
  !!
  !! FUNCTION
  !!  This structure is a container for all variables that can be splitted
  !!  over spin or k points. It is used for instance in the group #etsf_wavedata.
  !!  This type works for integer data. See #etsf_io_splitted_var_double to
  !!  split arrays of double precision. It contains:
  !!   - array = an array with undefined shape. It contains a pointer to
  !!     the memory areawhere data are stored or can be stored.
  !!   - k_splitted = when .true., it indicates that the target of @array is allocated
  !!     only for one given k point value defined by @k_id.
  !!   - spin_splitted = when .true., it indicates that the target of @array is allocated
  !!     only for one given spin value defined by @spin_id.
  !!   - k_id = the index of k point for which the target of @array is allocated.
  !!   - spin_id = the index of spin for which the target of @array is allocated.
  !!  If the target of @array is not splitted, then put @k_splitted and @spin_splitted
  !!  to .false.. By default, the array is not splitted.
  !!
  !! SOURCE
  type etsf_io_splitted_var_integer
    type(etsf_io_low_var_integer) :: array
    logical                       :: k_splitted = .false., spin_splitted = .false.
    integer                       :: k_id, spin_id
  end type etsf_io_splitted_var_integer
  !!***

  !!****s* etsf_io_basics_group/etsf_io_splitted_var_double
  !! NAME
  !!  etsf_io_splitted_var_double
  !!
  !! FUNCTION
  !!  This structure is a container for all variables that can be splitted
  !!  over spin or k points. It is used for instance in the group #etsf_electrons.
  !!  This type works for double precision data. See #etsf_io_splitted_var_integer to
  !!  split arrays of integer. It contains:
  !!   - array = an array with undefined shape. It contains a pointer to
  !!     the memory areawhere data are stored or can be stored.
  !!   - k_splitted = when .true., it indicates that the target of @array is allocated
  !!     only for one given k point value defined by @k_id.
  !!   - spin_splitted = when .true., it indicates that the target of @array is allocated
  !!     only for one given spin value defined by @spin_id.
  !!   - k_id = the index of k point for which the target of @array is allocated.
  !!   - spin_id = the index of spin for which the target of @array is allocated.
  !!  If the target of @array is not splitted, then put @k_splitted and @spin_splitted
  !!  to .false.. By default, the array is not splitted.
  !!
  !! SOURCE
  type etsf_io_splitted_var_double
    type(etsf_io_low_var_double) :: array
    logical                      :: k_splitted = .false., spin_splitted = .false.
    integer                      :: k_id, spin_id
  end type etsf_io_splitted_var_double
  !!***

  !!****s* etsf_io/etsf_main
  !! NAME
  !!  etsf_main
  !!
  !! FUNCTION
  !!  This structure is a container for the main (and voulminous) data stored in
  !!  an ETSF file. Their type is #etsf_io_low_var_double that enables to use
  !!  dimensions with a different shape that the one defined by NetCDF without
  !!  any data duplication.
  !!
  !! SOURCE
@STRUCT_MAIN@
  !!***

@STRUCTURES@

  !!****s* etsf_io/etsf_groups
  !! NAME
  !!  etsf_groups
  !!
  !! FUNCTION
  !!  This structure is a container for all available groups defined in the specifications.
  !!  To use this structure, create a group (instanciating a #etsf_wavedata or a
  !!  #etsf_geometry), and associate this group to its pointer:
  !!   type(etsf_geometry) :: geometry_data
  !!   type(etsf_groups)   :: my_groups
  !!   ... do something with geometry_data ...
  !!   my_groups%geometry => geometry_data
  !!   ... do something with my_groups ...
  !!  Several groups can be associated at a time in #etsf_groups.
  !!
  !! SOURCE
@STRUCT_GROUPS@
  !!***

  !!****g* etsf_io/etsf_io_data_group
  !! FUNCTION
  !!  These are the most usefull routines of the library etsf_io. They are used
  !!  to read/write all or some selected variables of the ETSF specifications.
  !!
  !! SOURCE
  public :: etsf_groups
  public :: etsf_io_data_init
  public :: etsf_io_data_read
  public :: etsf_io_data_write
  !!***

  !!****g* etsf_io/etsf_io_basics_group
  !! FUNCTION
  !!  These are public parameters or types defined in the ETSF library.
  !!
  !! SOURCE
  public :: etsf_dims
  public :: etsf_io_splitted_var_double
  public :: etsf_io_splitted_var_integer
  !!***

contains

@INCLUDES@

end module etsf_io
