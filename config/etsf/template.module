!{\src2tex{textfont=tt}}
!!****h* group_level/etsf_io
!! NAME
!!  etsf_io
!!
!! FUNCTION
!!  This module contains all information required by the ETSF/Nanoquanta
!!  file format specifications. See http://www.etsf.eu/fileformats for
!!  details.
!!
!!  It contains definitions of:
!!  * #ETSF_IO_CONSTANTS some constants defined by the specifications ;
!!  * #FLAGS_GROUPS & #FLAGS_MAIN, public flags to identify specific
!!    structures ;
!!  * the list of all dimensions declared in the specifications, see
!!    #etsf_dimensions.
!!  * several structures to store variable used in a same context, such as
!!    geometry informations, k points data...
!!  * a container (see #etsf_groups) to agregate all previous structures.
!!  * a container to store the main data (see #etsf_main).
!!
!! COPYRIGHT
!!  Copyright (C) 2006, 2007 (Damien Caliste)
!!  This file is distributed under the terms of the
!!  GNU Lesser General Public License, see the COPYING file
!!  or http://www.gnu.org/copyleft/lesser.txt .
!!
!! NOTES
!!  This file has been automatically generated by the @SCRIPT@
!!  script. Any change you would bring to it will systematically be
!!  overwritten.
!!***
module etsf_io

  use etsf_io_low_level

  implicit none

  !!****d* etsf_io_basics_group/ETSF_IO_CONSTANTS
  !! NAME
  !!  ETSF_IO_CONSTANTS
  !!
  !! FUNCTION
  !!  These values are fixed by the specifications or are static values.
  !!   * etsf_spec_dimension = to be used in a count argument (see
  !!                           etsf_io_low_read_var() for instance) when
  !!                           one wants to read all the values of one
  !!                           dimension. For example count = (/ 1, etsf_spec_dimension /)
  !!                           will read one element from the first dimension and
  !!                           all for the second.
  !!   * etsf_no_sub_access = some variable can be accessed only for one index in a
  !!                          specific dimension (usually spin or k points). This
  !!                          value is used to tell the library to access all the values
  !!                          of that dimension.
  !!   * etsf_no_dimension = this value is given to a dimension. It means that
  !!                         the file does not contain that dimension.
  !!
  !! SOURCE
  ! Constants for internal dimensions
  integer, parameter :: etsf_charlen = 80
  integer, parameter :: etsf_histlen = 1024
  integer, parameter :: etsf_chemlen = 2
  integer, parameter :: etsf_3dimlen = 3
  integer, parameter :: etsf_spec_dimension = 0
  integer, parameter :: etsf_no_sub_access = 0
  integer, parameter :: etsf_no_dimension = 0

@CONSTANTS@
  !!***

  !!****s* etsf_io_basics_group/etsf_vars
  !! NAME
  !!  etsf_vars
  !!
  !! FUNCTION
  !!  This structure contains informations about a list of variables. It inherits
  !!  from etsf_io_low_var_infos type, but it adds new fields, specific to
  !!  the ETSF norm. These fields are:
  !!  * @group which is a value in FLAGS_GROUPS ;
  !!  * @varid which is a value in FLAGS_MAIN ;
  !!  * @split which defines if the variable is a split definition array.
  !!  This structure is intrinsectly an array for performance reasons since
  !!  variables are usually handled together. Use etsf_io_vars_free() to 
  !!  deallocate it.
  !!
  !! SOURCE
  type etsf_vars
    integer                              :: n_vars    =  0
    type(etsf_io_low_var_infos), pointer :: parent(:) => null()
    integer, pointer                     :: group(:)  => null()
    integer, pointer                     :: varid(:)  => null()
    logical, pointer                     :: split(:)  => null()
  end type etsf_vars
  !!***

  !!****d* etsf_io_basics_group/FLAGS_GROUPS
  !! NAME
  !!  FLAGS_GROUPS
  !!
  !! FUNCTION
  !!  These flags are used when indicating which groups must be used.
  !!  If several groups must be accessed, then, simply add the corresponding
  !!  flags. See etsf_io_data_write() or etsf_io_data_read() for usage.
  !!
  !! SOURCE
@FLAGS_GROUPS@
  !!***

  !!****d* etsf_io_basics_group/FLAGS_VARIABLES
  !! NAME
  !!  FLAGS_VARIABLES
  !!
  !! FUNCTION
  !!  These flags are used on data definition (see etsf_io_data_init()) to specify
  !!  which variables should be defined in the NetCDF file. They are not exclusive.
  !!
  !! SOURCE
@FLAGS_VARIABLES@
  !!***

  !!****d* etsf_io_basics_group/ETSF_IO_VALIDITY_FLAGS
  !! NAME
  !!  ETSF_IO_VALIDITY_FLAGS
  !!
  !! FUNCTION
  !!  These flags are used to identify a valid file as defined
  !!  in the specifications. These valid files contains physical informations such as
  !!  a potential or crystalographic data. Flags are not exclusive.
  !!
  !! SOURCE
@ETSF_IO_VALIDITY_FLAGS@
  !!***

  !!****s* etsf_io_basics_group/etsf_dims
  !! NAME
  !!  etsf_dimensions
  !!
  !! FUNCTION
  !!  This structure is a container that stores all dimensions defined in the
  !!  specifications. An instance of this structure is required when a new
  !!  ETSF file is created.
  !!
  !! SOURCE
@DIMENSIONS@
  !!***

@STRUCTURES@

  !!****s* etsf_io_basics_group/etsf_groups_flags
  !! NAME
  !!  etsf_groups_flags
  !!
  !! FUNCTION
  !!  This structure is a container for each group to specify which variables
  !!  are required (see etsf_io_data_init()).
  !!
  !! SOURCE
@STRUCT_GROUPS_FLAGS@
  !!***

  !!****s* etsf_io/etsf_groups
  !! NAME
  !!  etsf_groups
  !!
  !! FUNCTION
  !!  This structure is a container for all available groups defined in the specifications.
  !!  To use this structure, create a group (instanciating a #etsf_basisdata or a
  !!  #etsf_geometry), and associate this group to its pointer:
  !!   type(etsf_geometry) :: geometry_data
  !!   type(etsf_groups)   :: my_groups
  !!   ... do something with geometry_data ...
  !!   my_groups%geometry => geometry_data
  !!   ... do something with my_groups ...
  !!  Several groups can be associated at a time in #etsf_groups.
  !!
  !! SOURCE
@STRUCT_GROUPS@
  !!***

  !!****s* etsf_io_basics_group/etsf_split
  !! FUNCTION
  !!  This group is used to store description array in the case of a splitted file.
  !!
  !! SOURCE
@SPLIT_GROUP@
  !!***

  ! Private group, use internally to get the name of dimensions
  ! that can be splitted.
@SPLIT_NAME_GROUP@
  private :: split_dim_names

  !!****g* etsf_io/etsf_io_data_group
  !! FUNCTION
  !!  These are the most usefull routines of the library etsf_io. They are used
  !!  to read/write all or some selected variables of the ETSF specifications.
  !!
  !! SOURCE
  public :: etsf_groups
  public :: etsf_io_data_init
  public :: etsf_io_data_read
  public :: etsf_io_data_write
  !!***

  !!****g* etsf_io/etsf_io_basics_group
  !! FUNCTION
  !!  These are public parameters or types defined in the ETSF library.
  !!
  !! SOURCE
  public :: etsf_dims
  !!***

contains

@INCLUDES@

end module etsf_io
