# -*- Python -*-
#
# Copyright (c) 2006 The ABINIT Group (Yann Pouillon)
# All rights reserved.
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

#
# Subprograms making up the ETSF file format library
#
# Note: The following statements have to be readable by Python scripts
#

# Subprogram peculiarities
ETSF_SUBS_PROP_NONE = 0

# Descriptions of the modules
# <name> : <template>
etsf_modules = {
   "etsf_io":"module"
}

# Descriptions of the subprograms
# <name> : [ <template>, <info>, <action(s)>, <return type>]
etsf_subprograms = {
   "dims":[
      "low_level",
      """!!  @ACTION_TEXT@ all ETSF dimensions.""",
      "def get merge trace"],
   "@GROUP@":[
      "low_level",
      """!!  @ACTION_TEXT@ ETSF variables for @GROUP@.""",
      "def get put copy"],
   "data":[
      "data",
      "!!  @ACTION_TEXT@ an ETSF file.",
      "init read write contents get copy"],
   "split":[
      "low_level",
      """!!  @ACTION_TEXT@ ETSF split variables.""",
      "init allocate free def get put copy merge"],
   "vars":[
      "low_level",
      """!!  @ACTION_TEXT@ etsf_vars structures.""",
      "free"],
} 

# Peculiarities
etsf_subs_properties = {
}

# All possible actions
etsf_subs_actions = {
   "def":"define",
   "get":"get",
   "put":"put",
   "init":"initialize",
   "allocate":"allocate",
   "read":"read",
   "write":"write",
   "contents":"analyze",
   "copy":"copy",
   "trace":"echo a trace",
   "free":"deallocate",
   "merge":"merge"
}

# Descriptions of the subprogram arguments for the "def" action
etsf_subs_def_args = {
   "dims":[
      "ncid integer in",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"],
   "main":[
      "ncid integer in",
      "mains integer in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "k_dependent logical in optional",
      "split type(etsf_split) in optional",
      "ivar integer local",
      "split_dims type(split_dim_names) local"],
   "@GROUP@":[
      "ncid integer in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "k_dependent logical in optional",
      "split type(etsf_split) in optional",
      "ivar integer local",
      "split_dims type(split_dim_names) local"],
   "split":[
      "ncid integer in",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"]
}

# Descriptions of the subprogram arguments for the "get" action
etsf_subs_get_args = {
   "dims":[
      "ncid integer in",
      "dims type(etsf_dims) out",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"],
   "@GROUP@":[
      "ncid integer in",
      "folder type(etsf_@GROUP@) inout",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "use_atomic_units logical in optional",
      "varid(:) integer,allocatable local",
      "start(:) integer,allocatable local",
      "count(:) integer,allocatable local",
      "len integer local",
      "flag character(etsf_charlen) local"],
   "split":[
      "ncid integer in",
      "split type(etsf_split) inout",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"],
   "data":[
      "etsf_group integer out",
      "etsf_main integer out",
      "etsf_split logical out",
      "varname character(len=*) in"]
}

# Descriptions of the subprogram arguments for the "put" action
etsf_subs_put_args = {
   "@GROUP@":[
      "ncid integer in",
      "folder type(etsf_@GROUP@) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "varid(:) integer,allocatable local",
      "start(:) integer,allocatable local",
      "count(:) integer,allocatable local",
      "len integer local",
      "flag character(etsf_charlen) local"],
   "split":[
      "ncid integer in",
      "split type(etsf_split) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"]
}

# Descriptions of the subprogram arguments for the "init" action
etsf_subs_init_args = {
   "data":[
      "filename character(len=*) in",
      "mains integer in",
      "groups integer in",
      "dims type(etsf_dims) inout",
      "title character(len=*) in",
      "history character(len=*) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "k_dependent logical in optional",
      "overwrite logical in optional",
      "split_definition type(etsf_split) in optional"],
   "split":[
      "dims type(etsf_dims) inout",
      "split_definition type(etsf_split) in"] 
}

# Descriptions of the subprogram arguments for the "contents" action
etsf_subs_contents_args = {
   "data":[
      "filename character(len=*) in",
      "dims type(etsf_dims) out",
      "split type(etsf_split) out",
      "etsf_main integer out",
      "etsf_group integer out",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "vars_infos type(etsf_vars) inout optional",
      "with_dim_name logical local",
      "group_id integer local",
      "var_id integer local",
      "split_id logical local"]
}

# Descriptions of the subprogram arguments for the "read" action
etsf_subs_read_args = {
   "data":[
      "filename character(len=*) in",
      "groups integer in",
      "group_folder type(etsf_groups) inout",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "use_atomic_units logical in optional"]
}

# Descriptions of the subprogram arguments for the "write" action
etsf_subs_write_args = {
   "data":[
      "filename character(len=*) in",
      "groups integer in",
      "group_folder type(etsf_groups) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"]
}

# Descriptions of the subprogram arguments for the "copy" action
etsf_subs_copy_args = {
   "split":[
      "ncid_to integer in",
      "ncid_from integer in",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "split_array(:) integer,allocatable local"],
   "@GROUP@":[
      "ncid_to integer in",
      "ncid_from integer in",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "split type(etsf_split) in optional",
      "start(:) integer,allocatable local",
      "count(:) integer,allocatable local",
      "len integer local",
      "istart integer local",
      "idim1,idim2,idim3,idim4,idim5,idim6,idim7,idim8 integer local",
      "istop(:) integer,allocatable local",
      "jstart(:) integer,allocatable local",
      "jend(:) integer,allocatable local",
      "folder type(etsf_@GROUP@) local"],
   "data":[
      "dest_file character(len=*) in",
      "source_file character(len=*) in",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "split type(etsf_split) in optional",
      "ncid_to integer local"]
}

# Descriptions of the subprogram arguments for the "trace" action
etsf_subs_trace_args = {
   "dims":[
      "dims type(etsf_dims) in"]
}

# Descriptions of the subprogram arguments for the "allocate" action
etsf_subs_allocate_args = {
   "split":[
      "split type(etsf_split) out",
      "dims type(etsf_dims) in"]
}

# Descriptions of the subprogram arguments for the "free" action
etsf_subs_free_args = {
   "split":[
      "split type(etsf_split) inout"],
   "vars":[
      "vars_infos type(etsf_vars) inout"]
}

# Descriptions of the subprogram arguments for the "free" action
etsf_subs_merge_args = {
   "dims":[
      "output_dims type(etsf_dims) inout",
      "dims type(etsf_dims) in",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out"],
   "split":[
      "output_split type(etsf_split) inout",
      "split type(etsf_split) inout",
      "lstat logical out",
      "error_data type(etsf_io_low_error) out",
      "ivar integer local",
      "len integer local"]
}

# Documentation for arguments. The key is build on (separated by dash)
#  - the argument name ;
#  - the target (dims, main, data, electrons...) 'underscore' the action (get, put, def...).
# When looking for a documentation, specific values are looked for before
# the wild card *.
etsf_subs_doc_args = {
   "ncid-*":"""
     integer returned by an 'open' NetCDF call. The file can be 
     either in define or write mode. This status can be changed
     by the call.""",
   "ncid_from-*":"""
     integer returned by an 'open' NetCDF call. This id must have read access
     granted. It will be left untouched.""",
   "ncid_to-*":"""
     integer returned by an 'open' NetCDF call. This id must have write access
     granted. It will be modified by the routine. The file must be in write
     mode (see etsf_io_low_set_write_mode()).""",
   "lstat-*":"""
     return .true. if all the actions succeed, if not the status
     of the file is undefined.""",
   "error_data-*":"""
     contains the details of the error is @lstat is false.""",
   "dims-*_copy":"""
     these dimensions correspond to the source_file ones and are used to allocate
     temporary arrays in memory during the copy.""",
   "dims-dims_def":"""
     contains all the dimensions required by the ETSF file. These values
     will be used later to allocate the disk space for variables, see
     etsf_io_electrons_def() or routines of the same kind.""",
   "dims-dims_get":"""
     an allocated structure to put the read values for all dimensions
     of the ETSF file pointed by @ncid.""",
   "dims-*_trace":"""
     the structure that should be output on screen.""",
   "dims-dims_merge":"""
     the dimensions to be merge into argument @output_dims. If the dimension begin
     with my_something, if the value is different from the something dimension, it
     is added into @output_dims. If the dimension is a regular one, the equity is
     only checked between dims and output_dims.""",
   "dims-split_def":"""
     contains all the dimensions required by the special my_something arrays.""",
   "dims-data_init":"""
     contains all the dimensions required by the ETSF file. It will be modify
     by setting the constant dimensions to their right values, and the my_something
     dimensions will be set according to the @split optional argument (if not
     present, they will be put to their none split values).""",
   "dims-data_contents":"""
     the dimensions will be read and stored, using etsf_io_dims_get().""",
   "dims-split_init":"""
     will be changed according to the @split argument. For each allocated array
     in @split, their corresponding dimension will be put to the array size ;
     else, the none-split value is used.""",
   "dims-split_allocate":"""
     these dimensions define which arrays of argument @split should be allocated ;
     it give also the size for these arrays.""",
   "dims-split_copy":"""
     the special split arrays are copied if their corresponding dimension, read
     from @dims, are different from etsf_no_dimension and different from their
     non-split value.""",
   "dims-data_copy":"""
     these dimensions correspond to the source_file ones and are used to allocate
     temporary arrays in memory during the copy.""",
   "k_dependent-*":"""
     use this argument to set the attribute flag 'k_dependent' to 'yes'
     or 'no' on variables that have it. If no variable in the group has
     the attribute 'k_dependent', this argument has no effect. The default
     value is .true. (which puts 'yes' in the file).""",
   "folder-*":"""
     an allocated structure with pointers on allocated areas in memory.
     These areas will be read or written if the pointer is associated, if
     not, the variable will be ignored. It is possible to access to specific
     dimensions of a variable using the <short_var_name>__kpoint_access or
     <short_var_name>__spin_access of this @folder structure. The 
     <short_var_name>__number_of_<something> can also been set if only a subpart
     in one dimension should be accessed (this is possible when the specifications
     have been declared with a max_number_of_<something>.""",
   "use_atomic_units-*":"""
     set this flag to .true. makes the library use the value of the attribute
     scale_to_atomic_units to multiply the read variables (that are units dependent)
     by this factor (if different from 1.0d0).""",
   "mains-*":"""
     unless other groups, one can choose the variables of the main group
     that will be defined (and disk allocated) using this flag. This is a sum
     of values taken from #FLAGS_MAIN.""",
   "filename-*":"""
     the path to the file to be accessed.""",
   "groups-data_init":"""
     choose the groups (from #etsf_groups) that will be used. This is a sum of
     values taken from #FLAGS_GROUPS. Except for the main group, all variables
     of the chosen groups will be defined (and disk allocated).""",
   "title-data_init":"""
     the title of the file (maybe null but should not).""",
   "history-data_init":"""
     some history information (maybe null).""",
   "group_folder-*":"""
     a container for different groups. All groups specified in the @groups argument
     must be associated.""",
   "groups-*":"""
     choose the groups (from #etsf_groups) that will be accessed. This is a sum of
     values taken from #FLAGS_GROUPS.""",
   "overwrite-data_init":"""
     will overwrite an existing file with the same file name (default is .false.).""",
   "split-*_def":"""
     for each array associated in the type, the dimension used to declared the
     variables sizes will be 'my_/something/'.""",
   "split-split_put":"""
     copy the allocated arrays from this argument to the disk.""",
   "split-split_get":"""
     read from the disk the values of each associated array of @split.""",
   "split-split_allocate":"""
     read the @dims argument to allocate the required split arrays, use
     etsf_io_split_free() when the split structure is not needed anymore.""",
   "split-split_free":"""
     free all associated array in the split definition.""",
   "output_split":"""
     this split definition is modified according to the given @split one. Its arrays
     must have been allocated at the right size and should have been initialised with
     negative values (see etsf_io_split_allocate()). Eaqch values in the arrays of
     @split are copied to those of output_split on first found negative values.
     Use etsf_io_dims_merge() to get the right size for a merged split definition.""",
   "split-split_merge":"""
     the value from this structure are copied into the right arrays in
     @output_split and the values are changed then to be the indexes used in
     @output_split.""",
   "split-data_contents":"""
     if any, read the split array from the given file and put their values
     in this argument. If lstat = .true., it may be allocated in output.
     So, after use, it must be deallocated, using etsf_io_split_free().""",
   "split-*_copy":"""
     if this argument is given, the values in the split definition (e.g. my_kpoints)
     are used to put the data in the destination file in a bigger array at the right
     placed.""",
   "split_definition-*":"""
     give for each associated array the number of elements (given by the size)
     and the values of these elements in a splitted file.""",
   "etsf_main-*_contents":"""
     this integer is on output a union of flags defining the main variables used
     in the read file.""",
   "etsf_group-*_contents":"""
     this integer is on output a union of flags defining the groups used
     in the read file.""",
   "dest_file-*":"""
     the path to the file to be written.""",
   "source_files-*":"""
     an array with all files to be read and copied to the @dest_file.""",
   "etsf_split-*_get":"""
     this logical is .true. if @varname is a valid split name.""",
   "etsf_main-*_get":"""
     this integer is a flag corresponding to the given @varname.""",
   "etsf_group-*_get":"""
     this integer is a flag corresponding to the group in which the given
     @varname is defined.""",
   "varname-*":"""
     the name of a variable, to know if it is part of ETSF or not.""",
   "vars_infos-data_contents":"""
     when reading the file for variable informations, it creates a list of
     type(etsf_var) that describes all the variables in the
     file. This list contains non ETSF informations such as variable names,
     types, shapes, an array of dimension values and an other array of dimension
     names. It also contains ETSF informations, like group id or if the variable
     is a split definition. When given, internal pointers are associated in the
     subroutine. To free them, use etsf_io_vars_free().""",
}

etsf_subs_doc_desc = {
  "*_get":"""
    Read an opened ETSF file to get data related to the given group.
    Only associated pointers of argument @folder will be accessed. If any accessed
    variable is missing, this routine returns an error (usually an access_mode_id
    of argument error_data set to ERROR_MODE_INQ). Any other errors implies a
    return with @lstat = .false..""",
  "*_put":"""
    Write data related to the given group in an opened ETSF file (it must be in
    write mode, use etsf_io_low_set_write_mode() to change it).
    Only associated pointers of argument @folder will be accessed. If any errors
    occurs it returns with @lstat = .false..""",
  "*_def":"""
    The given ETSF file must be opened and in define state (see
    etsf_io_low_set_define_mode() to change it). Then, all variable of the group
    are defined. All required dimensions must have already defined (see
    etsf_io_dims_def(). If some dimensions are missing, then the variable
    is not defined and no error are generated.

    One can specify which variable may be splitted using the optional argument
    @split. For each associated array in this structure, variable with appropriated
    dimensions will use my_<something> instead of <something>.""",
  "*_copy":"""
    This routine copy all variable of a group from one file @ncid_from to another
    @ncid_to. If a variable is missing in the source file, this does not raise an
    error, it is simply skipped. But if a variable in the destination file is not
    defined, this will raise an error.

    The copy is done per variable. This means that memory occupation is reduced
    during the copy.

    Normally, copies are pristine copies. But if optional argument @split is
    given, then the read values are copied to the specified locations in split
    arrays. In that case, the destination variable must have a compatible definition
    with the split values.""",
  "dims_merge":"""
    It is a checking routine. For all variable, it checks that values are the same
    in source and destination. For my_<something> variables, if values are different
    then output value is the sum of previous value and input value. This is useful
    when the dimensions have split definition. In that case, merging all input file
    dimensions will check classical dimensions and sum all split dimensions. At
    the end, if my_<something> is equal to <something> then the merging of the
    files will end up in suppressing the split for the <something> variable. In
    the other case (my_<something> < <something>), the resulting merge file
    will still have a split dimension <something> but with more values.""",
  "dims_trace":"""
    Output for each variable its value. Essentially used for debugging.""",
  "dims_get":"""
    Read the dimensions from an ETSF file. If one dimension is not found,
    its value is put to etsf_no_dimension (see ETSF_IO_CONSTANTS).""",
  "dims_def":"""
    Create dimensions and set their values. For normal dimensions, their are defined
    if their values are different from etsf_no_dimension (see ETSF_IO_CONSTANTS).
    For split dimensions (my_<something>), they are defined only if they are
    different from etsf_no_dimension or from the value of dimension <something>.""",
  "split_allocate":"""
    Allocate internal pointers of structure etsf_split given the dimensions
    in @dims. The split arrays are allocated only if the associated dimensions
    are different from etsf_no_dimension (see ETSF_IO_CONSTANTS) and from
    the associated full dimension. To free a split structure, use
    etsf_io_split_free().""",
  "split_copy":"""
    As for etsf_io_electrons_copy() for instance, it copy all values from split
    definitions of file @ncid_from to file @ncid_to. Arrays are copied only if
    their dimensions are neither etsf_no_dimension (see ETSF_IO_CONSTANTS) nor
    the associated full dimension value. The arrays in @ncid_to must already be
    defined, use etsf_io_split_def() to do it.""",
  "split_def":"""
    Create arrays for split definitions. They are defined only if their
    dimensions (my_<something>) are different from etsf_no_dimension (see
    ETSF_IO_CONSTANTS) or from the value of dimension <something>.""",
  "split_free":"""
    Deallocate a split defintions, previously allocated with
    etsf_io_split_allocate().""",
  "split_get":"""
    Read the split defintions from a file. Only associated pointers from the
    @split structure will be read.""",
  "split_init":"""
    This routine is used to set the dimensions from a split defintion. It
    copies to @dims%my_<something> the size of associated arrays in
    @split_definition.""",
  "split_merge":"""
    This is a complex routine that create a larger split definition (@output_split)
    from an input split definition (@split). For each associated array in @split,
    it copies all values of this array into the corresponding array in @output_split.
    The position in the corresponding array is the first unused index (i.e. with a
    negative value).

    The input @split definition is then modified to reflect the new position of values
    in @output_split.""",
  "split_put":"""
    Simply write the split definition (of associated pointers) to the file.""",
  "vars_free":"""
    Free the given variable list.""",
  "data_contents":"""
    High-level routine that get informations from a given @filename. Returned values
    are the list of dimensions, allocated split definitions (if any), flags for
    main variables (see FLAGS_MAIN) and flags for groups (see FLAGS_GROUPS).

    This routine can also be used to get the comprehensive list of read variables
    with their definitions (name, shape, dimension names...). Use
    etsf_io_vars_free() to deallocate this list.""",
  "data_copy":"""
    High-level routine that copy all ETSF variables from one file to another.""",
  "data_get":"""
    This is a query routine to get informations about a variable when its name
    is given. It does not interact with any files and is just a Firtran version of
    the specifications.""",
  "data_init":"""
    High-level routine to create an ETSF file.""",
  "data_read":"""
    High-level routine to read a lot of ETSF variable at once.""",
  "data_write":"""
    High-level routine to write a lot of ETSF variable at once.""",
  }
