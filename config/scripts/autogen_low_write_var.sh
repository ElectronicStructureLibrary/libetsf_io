#!/bin/sh

# This script auto generate the write methods for the nD dimensional arrays,
# and the attributes.
# It create a new file for these write routines.
TARGET_FILE=src/low_level/write_routines_auto.f90
GENERATED_TYPES=( "integer" "double" "character" )
NF90_TYPES=( NF90_INT NF90_DOUBLE NF90_CHAR )

ATT_GENERATED_TYPES=( "integer" "real" "double" "character" )
ATT_NF90_TYPES=( NF90_INT NF90_FLOAT NF90_DOUBLE NF90_CHAR )

# If
if [ -f $TARGET_FILE ] ; then
  #echo "WARNING! target file already exists and will be overwritten."
  #echo "         Old version ($TARGET_FILE) is renamed with a '.old' extension."
  \cp $TARGET_FILE ${TARGET_FILE}.old
fi

# Echo a warning banner.
echo "!================================================================" > $TARGET_FILE
echo "! WARNING! this file is autogenerated. All modifications should" >> $TARGET_FILE
echo "! will be overwritten on next build. This file is automatically" >> $TARGET_FILE
echo "! produced by the scripts/autogen_write_arrays.sh." >> $TARGET_FILE
echo "!================================================================" >> $TARGET_FILE

# We append the new routines.
for ((i=0;i<3;i++)) ; do
  type=${GENERATED_TYPES[i]}
  nctype=${NF90_TYPES[i]}
  # When character are concerned, one dimension is reserved for the length.
  if test $type = "character" ; then
    fortrantype=${GENERATED_TYPES[i]}'(len = charlen)'
    # When character are concerned, one dimension is reserved for the length.
    start=2
    dimstart=1
    addarg=', charlen'
    charcomment=
  else
    if test $type = "double" ; then
      fortrantype=${GENERATED_TYPES[i]}' precision'
    else
      fortrantype=${GENERATED_TYPES[i]}
    fi
    start=1
    dimstart=0
    addarg=
    charcomment='!'
  fi
  for ((dim=${dimstart};dim<8;dim++)) ; do
    # We create the dimension declaration for the var array.
    if test $start -le $dim ; then
      vardims="("
      for ((j=$start;j<$dim;j++)) ; do
        vardims=${vardims}":,"
      done
      vardims=${vardims}":)"
      addcomment=
      
    else
      vardims=
      addcomment='!'
    fi
    cat >> $TARGET_FILE << EOF
  subroutine write_var_${type}_${dim}D(ncid, varname, var${addarg}, lstat, &
                                     & start, count, map, ncvarid, error_data)
    integer, intent(in)                            :: ncid${addarg}
    character(len = *), intent(in)                 :: varname
    ${fortrantype}, intent(in) :: var${vardims}
    logical, intent(out)                           :: lstat
    integer, intent(in), optional                  :: start(:), count(:), map(:)
    integer, intent(out), optional                 :: ncvarid
    type(etsf_io_low_error), intent(out), optional :: error_data

    !Local
    character(len = *), parameter :: me = "etsf_io_low_write_var_${type}_${dim}D"
    character(len = 80) :: err
    type(etsf_io_low_var_infos) :: var_nc, var_user
    type(etsf_io_low_error) :: error
    integer :: s, i
    integer :: my_start(16), my_count(16), my_map(16)
    logical :: stat, sub_set

    lstat = .false.
    call etsf_io_low_read_var_infos(ncid, varname, var_nc, stat, error_data = error)
    if (.not. stat) then
      if (present(error_data)) then
        error_data = error
      end if
      return
    end if
    var_user%name = varname
    var_user%nctype = ${nctype}
    var_user%ncshape = ${dim}
    ${addcomment}var_user%ncdims(${start}:${dim}) = shape(var)
    ${charcomment}var_user%ncdims(1) = charlen

    ! Create the access arrays from optional arguments.
    if (present(start) .and. present(count) .and. present(map)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_start = start, opt_count = count, opt_map = map, &
                                 & error_data = error)
    else if (present(start) .and. present(count)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_start = start, opt_count = count, error_data = error)
    else if (present(start) .and. present(map)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_start = start, opt_map = map, error_data = error)
    else if (present(count) .and. present(map)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_count = count, opt_map = map, error_data = error)
    else if (present(start)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_start = start, error_data = error)
    else if (present(count)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_count = count, error_data = error)
    else if (present(map)) then
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, &
                                 & opt_map = map, error_data = error)
    else
      call etsf_io_low_make_access(my_start, my_count, my_map, var_nc, stat, error_data = error)
    end if
    if (.not. stat) then
      if (present(error_data)) then
        error_data = error
      end if
      return
    end if

    ! Number of elements checks
    call etsf_io_low_check_var(var_nc, var_user, my_start(1:var_nc%ncshape), &
                             & my_count(1:var_nc%ncshape), my_map(1:var_nc%ncshape), &
                             & stat, error_data = error)
    if (.not. stat) then
      if (present(error_data)) then
        error_data = error
      end if
      return
    end if
    
    ! Now that we are sure that the written var has the same type and dimension
    ! that the argument one, we can do the put action securely.
    s = nf90_put_var(ncid, var_nc%ncid, values = var, &
                   & start = my_start(1:max(1, var_nc%ncshape)) &
    ${addcomment}               & ,count = my_count(1:max(1, var_nc%ncshape)) &
    ${addcomment}               & ,map = my_map(1:max(1, var_nc%ncshape)) &
                   &       )
    if (s /= nf90_noerr) then
      if (present(error_data)) then
        call etsf_io_low_error_set(error_data, ERROR_MODE_PUT, ERROR_TYPE_VAR, me, &
                     & tgtname = varname, tgtid = var_nc%ncid, errid = s, &
                     & errmess = nf90_strerror(s))
      end if
      return
    end if
    if (present(ncvarid)) then
      ncvarid = var_nc%ncid
    end if
    lstat = .true.
  end subroutine write_var_${type}_${dim}D
EOF
  done
done

echo "!==========================================" >> $TARGET_FILE
echo "! Interface routines for attribute reading." >> $TARGET_FILE
echo "!==========================================" >> $TARGET_FILE

for ((i=0;i<4;i++)) ; do
  type=${ATT_GENERATED_TYPES[i]}
  nctype=${ATT_NF90_TYPES[i]}
  if test $type = "character" ; then
    fortrantype=${ATT_GENERATED_TYPES[i]}'(len = *)'
    vardims=
  else
    if test $type = "double" ; then
      fortrantype=${ATT_GENERATED_TYPES[i]}' precision'
    else
      fortrantype=${ATT_GENERATED_TYPES[i]}
    fi
    vardims="(:)"
  fi
  cat >> $TARGET_FILE << EOF
  subroutine write_att_${type}_1D(ncid, ncvarid, attname, att, &
                                        & lstat, error_data)
    integer, intent(in)                            :: ncid
    integer, intent(in)                            :: ncvarid
    character(len = *), intent(in)                 :: attname
    ${fortrantype}, intent(in)                     :: att${vardims}
    logical, intent(out)                           :: lstat
    type(etsf_io_low_error), intent(out), optional :: error_data

    !Local
    character(len = *), parameter :: me = "etsf_io_low_write_att_${type}"
    integer :: s

    lstat = .false.
    s = nf90_put_att(ncid, ncvarid, attname, att)
    if (s /= nf90_noerr) then
      if (present(error_data)) then
        call etsf_io_low_error_set(error_data, ERROR_MODE_PUT, ERROR_TYPE_ATT, me, &
                     & tgtname = attname, tgtid = ncvarid, errid = s, errmess = nf90_strerror(s))
      end if
      return
    end if
    lstat = .true.
  end subroutine write_att_${type}_1D
EOF
  if test $type != "character" ; then
    cat >> $TARGET_FILE << EOF
  subroutine write_att_${type}(ncid, ncvarid, attname, att, &
                                        & lstat, error_data)
    integer, intent(in)                            :: ncid
    integer, intent(in)                            :: ncvarid
    character(len = *), intent(in)                 :: attname
    ${fortrantype}, intent(in)                     :: att
    logical, intent(out)                           :: lstat
    type(etsf_io_low_error), intent(out), optional :: error_data

    !Local
    character(len = *), parameter :: me = "etsf_io_low_read_att_${type}"
    integer :: s

    lstat = .false.
    s = nf90_put_att(ncid, ncvarid, attname, att)
    if (s /= nf90_noerr) then
      if (present(error_data)) then
        call etsf_io_low_error_set(error_data, ERROR_MODE_PUT, ERROR_TYPE_ATT, me, &
                     & tgtname = attname, tgtid = ncvarid, errid = s, errmess = nf90_strerror(s))
      end if
      return
    end if
    lstat = .true.
  end subroutine write_att_${type}
EOF
  fi
done

# Echo a warning banner.
echo "!====================================" >> $TARGET_FILE
echo "! WARNING! end of autogenerated file." >> $TARGET_FILE
echo "!====================================" >> $TARGET_FILE
